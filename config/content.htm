<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">ldodwua</span></p>
<p>個人倉儲:<a href="https://github.com/mdecp2024/hw-Kazlimu">https://github.com/mdecp2024/hw-Kazlimu</a></p>
<p>個人網站:<a href="https://mdecp2024.github.io/hw-Kazlimu/content/index.html">https://mdecp2024.github.io/hw-Kazlimu/content/index.html</a></p>
<p>其他資訊:靈夢不會飛</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p style="padding-left: 30px;"><img alt="" height="368" src="/images/陽光貓貓.jpg" width="800"/></p><h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 1 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w7</h3>
<p>ShareX 影片.</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/udmyucqlcWg" width="560"></iframe></p>
<h3>w10</h3>
<p>TEST VIDEO</p>
<p>題目 (1):</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/bLNIBytMxnI" width="560"></iframe></p>
<p>題目 (2):</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/zqwwiYHDFMU" width="560"></iframe></p>
<p>題目 (3):</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/2RC7KDc-6EU" width="560"></iframe></p>
<h3>w11_hw</h3>
<p>11x11 <span>"*" 字元圓型區域:</span></p>
<p><a href="https://mdecp2024.github.io/hw-Kazlimu/content/Brython.html?src=https://gist.githubusercontent.com/Kazlimu/134753b053b00a6977b610b4a54725bc/raw/18079fee527c405515da998df4395e2eafa5e8a4/%25E5%25AF%25A6%25E5%25BF%2583%25E5%259C%2593%25E5%25BD%25A2code">BRYTHON效果演示(1)</a></p>
<p>黑色方格圍成之圓形區域:</p>
<p><a href="https://mdecp2024.github.io/hw-Kazlimu/content/Brython.html?src=https://gist.githubusercontent.com/Kazlimu/bc18cf9646f539cc89a2f1cad304b08d/raw/17d01577284be99107f6e8b59b87255df4057f49/%25E7%2594%25A8%25E6%25A0%25BC%25E5%25AD%2590%25E5%259C%258D%25E6%2588%2590%25E5%259C%2593%25E5%25BD%25A2%25E5%258D%2580%25E5%259F%259F">BRYTHON效果演示(2)</a></p>
<p>-------------------------------------</p>
<p>影片演示:</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/GwL033earqY" width="560"></iframe></p>
<p>---------------------------------------</p>
<p>心得:</p>
<p>利用導師提供之預設模型讓AI學習完後再產生所需之代碼，<span>多善用網路資源或AI協助，來完成自己的目標。</span></p>
<p></p>
<h3>w12_hw</h3>
<p>利用For迴圈排列數字:</p>
<p><a href="https://mdecp2024.github.io/hw-Kazlimu/content/Brython.html?src=https://gist.githubusercontent.com/Kazlimu/ca387446eb880dac6d76fb447446c5e7/raw/598f4cab063852842d362b11de0062d42fe0c6bb/For%2520%25E8%25BF%25B4%25E5%259C%2588">BRYTHON效果演示(1)</a></p>
<p>----------------------------</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/Zb1t8axINWk" width="560"></iframe></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/R_pJOfGcLUo" width="560"></iframe></p>
<p>------------------------------</p>
<p>心得：簡潔明瞭的代碼在可讀性與修改上都能減輕人員負擔，利用基本的程式設計原則來簡化代碼，是我尚需學習的目標之一。</p>
<h3>w13_hw</h3>
<p>w13 作業:</p>
<p>請在下列圖形中的兩個正方形外圍, 以黑色畫筆畫圓, 並設法在各線條所圍成的封閉區域塗上不同顏色. 操作過程請拍攝影片, 並在頁面中列出作業心得。</p>
<p><a href="https://mdecp2024.github.io/hw-Kazlimu/content/Brython.html?src=https://gist.githubusercontent.com/Kazlimu/db6bb27ec304701edb5b2f8085c3447a/raw/f9f3d0b131b3788ac51edea11d06a8d2c5ef0c67/%25E5%25A1%25AB%25E5%2585%2585%25E5%25B0%2581%25E9%2596%2589%25E5%259C%2596%25E5%25BD%25A2">BRYTHON封閉區塊填色演示</a></p>
<div></div>
<div id="brython_div1"></div>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
<script type="text/python3">
from browser import html
from browser import document as doc
 
# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=500, height=500)
brython_div = doc["brython_div1"]
brython_div <= canvas
ctx = canvas.getContext("2d")

ctx.lineWidth = 1
ctx.strokeStyle = 'red' 
ctx.beginPath()
ctx.rect(50, 50, 200, 200)  
ctx.rect(150, 150, 200, 200)  
ctx.stroke()
ctx.strokeStyle = 'blue' 
ctx.beginPath()
ctx.moveTo(50, 50)  
ctx.lineTo(250, 250)  
ctx.stroke()
ctx.strokeStyle = 'black'  
ctx.beginPath()
ctx.arc(150, 150, 141.4, 0, 2 * 3.14) 
ctx.stroke()
ctx.beginPath()
ctx.arc(250, 250, 141.4, 0, 2 * 3.14)  
ctx.stroke()
</script>
</p>
<div>影片演示:</div>
<div><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/RQ2UL1zvEjE" width="560"></iframe></div>
<div></div>
<div>心得:</div>
<div>因圖形與封閉區塊較多，導致了程式碼較複雜，因此也借助了GPT的協助來更好的了解代碼再編排及運用的合理與適當性，來完成此次的作業。</div>
<h3>w14_ex</h3>
<p><span>請根據兩個圓繪圖所圍成的區域</span><span>(目前圍成三個區域, 但若圓心移動可能彼此獨立)進行不同顏色著色, 條件是當各圓半徑與圓心座標變動時, 程式只需輸入兩個圓的圓心座標與半徑, 就可以完成各區域的著色任務.</span></p>
<p></p>
<div id="brython_div1"></div>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
<script type="text/python3">
from browser import html
from browser import document as doc
import random1
import math

# 定義一個函式來初始化畫布
def initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):
    """
    初始化畫布，創建一個指定大小的 Canvas 元素，並將其加到 HTML 文件中。
    返回畫布元素和它的 2D 繪圖上下文。
    """
    canvas = html.CANVAS(width=canvas_width, height=canvas_height)
    brython_div = doc[id]
    brython_div <= canvas
    ctx = canvas.getContext("2d")
    return canvas, ctx

# 定義一個隨機顏色生成函式
def random_color_generator():
    r = random.randint(0, 255)
    g = random.randint(0, 255)
    b = random.randint(0, 255)
    return f"rgb({r}, {g}, {b})"

# 判斷點是否在圓內
def is_point_in_circle(px, py, cx, cy, r):
    return (px - cx) ** 2 + (py - cy) ** 2 <= r ** 2

# 檢查所有圓是否有重疊
def ensure_no_isolated_circles(circles):
    overlap = [False] * len(circles)
    for i in range(len(circles)):
        for j in range(i + 1, len(circles)):
            cx1, cy1, r1 = circles[i]
            cx2, cy2, r2 = circles[j]
            distance = math.sqrt((cx1 - cx2) ** 2 + (cy1 - cy2) ** 2)
            if distance <= r1 + r2:  # 判斷是否有重疊
                overlap[i] = True
                overlap[j] = True
    return all(overlap)

# 使用者設定的多個圓，並進行掃描線填充
def draw_circles():
    canvas, ctx = initialize_canvas(400, 400)
    ctx.clearRect(0, 0, canvas.width, canvas.height)

    color_dict = {}

    # 隨機生成 5 到 10 個圓，確保沒有圓是孤立的
    while True:
        num_circles = random.randint(5, 10)
        circles = [
            (random.randint(50, 350), random.randint(50, 350), random.randint(50, 100))
            for _ in range(num_circles)
        ]
        if ensure_no_isolated_circles(circles):
            break

    for py in range(0, canvas.height):
        for px in range(0, canvas.width):
            overlapping_indices = []

            for i, (cx, cy, r) in enumerate(circles):
                if is_point_in_circle(px, py, cx, cy, r):
                    overlapping_indices.append(i)

            if overlapping_indices:
                overlap_key = "_".join(map(str, sorted(overlapping_indices)))
                if overlap_key not in color_dict:
                    color_dict[overlap_key] = random_color_generator()
                current_color = color_dict[overlap_key]
            else:
                current_color = "white"

            ctx.fillStyle = current_color
            ctx.fillRect(px, py, 1, 1)

draw_circles()
</script>
</p>
<h3>w15</h3>
<p><span>題目一: 請利用 Gist 與 Brython 程式環境, 在個人的課程網站中新增一個頁面, 標題為 w15, 以"從 1 累加到 100"作為 anchor 的連結標題, 使用者點擊該連結之後, 可從各自的 Brython 頁面執行程式.</span></p>
<p><span><a href="https://mdecp2024.github.io/hw-Kazlimu/content/Brython.html?src=https://gist.githubusercontent.com/Kazlimu/70a0bd9a8b81f84345212ab6b2eff678/raw/d57065d2157e89f00c2fbfba8076313945de36e9/1%25E5%258A%25A0%25E5%2588%25B0100">"從 1 累加到 100"</a></span></p>
<p><span><img alt="" height="136" src="/images/螢幕擷取畫面 2024-12-19 150018.png" width="342"/></span></p>
<p><span>題目二: 延伸上題, 設計一個函式 addto(1, 100), 可以完成上述的累加結果. (以"addto"作為連結標題)</span></p>
<p><a href="https://mdecp2024.github.io/hw-Kazlimu/content/Brython.html?src=https://gist.githubusercontent.com/Kazlimu/1d179baae78d06c92403bd19b2cf5e90/raw/6631969d7a179c7df13da8b9ade38b71af3653e9/1%25E5%258A%25A0%25E5%2588%25B0100(addto%2520ver.)">"addto"</a></p>
<p><img alt="" height="203" src="/images/螢幕擷取畫面 2024-12-19 150156.png" width="372"/></p>
<p><span>題目三: 延伸上題, 設計一個函式 add_only_even(1, 100), 可以完成從第一個輸入整數, 累加到第二個輸入變數的累加結果. 頁面中請以 </span><span>add_only_even 作為連結標題.</span></p>
<p><span><a href="https://mdecp2024.github.io/hw-Kazlimu/content/Brython.html?src=https://gist.githubusercontent.com/Kazlimu/d5b1abb6f2b6e5d899049adb0cceeb06/raw/880b626955a7e4fa71f93cc4064fa3a1aacc56e9/1%25E5%258A%25A0%25E5%2588%25B0100(add_only_even%2520ver.)">"add_only_even"</a></span></p>
<p><span><img alt="" height="233" src="/images/螢幕擷取畫面 2024-12-19 150343.png" width="355"/></span></p>
<p><span>題目四: 延伸上題, 設計一個函式 add_avoid_8(1, 100), 可以完成從第一個輸入整數, 累加到第二個輸入變數的累加過程, 必須避開數字出現"8"的整數, 頁面中請以 add_avoid_8 作為連結標題.</span></p>
<p><span><a href="https://mdecp2024.github.io/hw-Kazlimu/content/Brython.html?src=https://gist.githubusercontent.com/Kazlimu/b53c5519c33522d7a4dc4dcbae31f878/raw/a9604292f450b078e53cf826826d9dc3ee912c44/1%25E5%258A%25A0%25E5%2588%25B0100(add_avoid_8%2520ver.)">"add_avoid_8"</a></span></p>
<p><span><img alt="" height="219" src="/images/螢幕擷取畫面 2024-12-19 150445.png" width="346"/></span></p>
<p><span>心得:俗話說條條大路通羅馬，在程式上也亦然，利用不同的coding來達到相同結果的同時，了解到不同coding間的特性與原理，並借助AI的演算法，好讓我們在未來能運用的更加自然與順手。</span></p>
<h1>HW 2</h1>
<h4>主題: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<hr/>
<p>延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%):</p>
<p>PART 2: Introduction to lists and if/else statements</p>
<p>PART 3: Introduction to the for loop</p>
<p>完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 2 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam1</h3>
<p>題目: 請以自己的學號最後四碼作為繪圖的座標原點, 並以 pixel=2 的黑色直線分別利用 Brython 繪圖, 標示出向右為正的 X 軸, 以及向下為正的 Y 軸, 並且利用文字標示出原點座標, 之後請自選最左側圖形的起始點座標, 直接在頁面畫出下列圖像, 繪圖程式除了必須直接列在頁面 html 檔案外, 也請存入自己的 Gist 區域, 並在所完成的圖像下方, 以自選標題的 anchor 連結至 Gist, 讓使用者點擊該連結後, 可以在各自的 Brython 頁面中繪出下列圖像.</p>
<p><a href="https://mdecp2024.github.io/hw-Kazlimu/content/Brython.html?src=https://gist.githubusercontent.com/Kazlimu/df0b8c9c90724425ed4a07f0231ef760/raw/b151f2a44e5c4747c4f9e79d634b72bfe603faa0/w16_exam1">w16_exam1 Brython 效果演示</a></p>
<p><span>影片流程演示:</span></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/2VVjkB7dtYM" width="560"></iframe></span></p>
<p></p>
<div></div>
<div id="brython_div1"></div>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
<script type="text/python3">
from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=500, height=500)
brython_div = doc["brython_div1"]
brython_div <= canvas

# 取得 canvas 的繪圖上下文
ctx = canvas.getContext("2d")

# 畫出 X 軸
ctx.beginPath()
ctx.strokeStyle = 'black'
ctx.lineWidth = 2
ctx.moveTo(31, 8)  # 原點
ctx.lineTo(200, 8)  # 向右延伸
ctx.stroke()

# 畫出 Y 軸
ctx.beginPath()
ctx.moveTo(31, 8)  # 原點
ctx.lineTo(31, 150)  # 向下延伸
ctx.stroke()

# 標示原點座標
ctx.font = "12px Arial"
ctx.fillStyle = "black"
ctx.fillText("(31, 8)", 35, 25)

ctx.font = "20px Arial"
ctx.fillStyle = "black"
ctx.fillText("Y", 40, 150)

ctx.font = "20px Arial"
ctx.fillStyle = "black"
ctx.fillText("X", 185, 30)

# 位移偏移量，將原點 (31, 48) 作為新的繪圖基準
offset_x = 31
offset_y = 48

# 畫橙色六邊形
ctx.beginPath()
ctx.fillStyle = "#F47920"
ctx.moveTo(offset_x + 40, offset_y + 63)
ctx.lineTo(offset_x + 60, offset_y + 33)
ctx.lineTo(offset_x + 90, offset_y + 33)
ctx.lineTo(offset_x + 110, offset_y + 63)
ctx.lineTo(offset_x + 90, offset_y + 93)
ctx.lineTo(offset_x + 60, offset_y + 93)
ctx.closePath()
ctx.fill()

# 畫綠色菱形
ctx.beginPath()
ctx.fillStyle = "#009F95"
ctx.moveTo(offset_x + 130, offset_y + 63)
ctx.lineTo(offset_x + 150, offset_y + 33)
ctx.lineTo(offset_x + 170, offset_y + 63)
ctx.lineTo(offset_x + 150, offset_y + 93)
ctx.closePath()
ctx.fill()

# 藍色三角形 (頂點在菱形右側，方向朝下)
ctx.beginPath()
ctx.fillStyle = "#40B4CB"
ctx.moveTo(offset_x + 174, offset_y + 63)  # 頂點在菱形右側
ctx.lineTo(offset_x + 154, offset_y + 93)  # 左下角
ctx.lineTo(offset_x + 194, offset_y + 93)  # 右下角
ctx.closePath()
ctx.fill()

# 畫粉紅色圓形
ctx.beginPath()
ctx.fillStyle = "#EB008B"
ctx.arc(offset_x + 220, offset_y + 63, 20, 0, 2 * 3.14159)
ctx.fill()

# 畫黃色正方形
ctx.beginPath()
ctx.fillStyle = "#FDD56A"
ctx.rect(offset_x + 260, offset_y + 43, 40, 40)
ctx.fill()

# 畫藍色矩形
ctx.beginPath()
ctx.fillStyle = "#003A70"
ctx.rect(offset_x + 320, offset_y + 53, 60, 20)
ctx.fill()
</script>
</p><h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam2</h3>
<p>題目一: 請以自己的學號最後四碼作為下列繪圖的左上方點座標, 並以紅色文字標示出該點座標, 之後請利用 pixel=2 的藍色直線, 自訂迷宮畫布大小, 直接在頁面畫出下列圖像, 繪圖程式除了必須直接列在頁面 html 檔案外, 也請存入自己的 Gist 區域, 並在所完成的圖像下方, 以自選標題的 anchor 連結至 Gist, 讓使用者點擊該連結後, 可以在各自的 Brython 頁面中繪出下列圖像.</p>
<p><a href="https://mdecp2024.github.io/hw-Kazlimu/content/Brython.html?src=https://gist.githubusercontent.com/Kazlimu/3fca4e8256095372b5c8beb227bfa3ab/raw/dc4ad4c1595ba6d2d5dc131fe32ae3d1495a9f57/w16_exam2">w16_exam2 Brython 效果演示 </a></p>
<p>影片流程演示:</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/tEflaoWTvEI" width="560"></iframe></p>
<div id="brython_div1"></div>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
<script type="text/python3">
from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=400, height=400, style={"border": "1px solid black"})
brython_div = doc["brython_div1"]
brython_div <= canvas

# 獲取繪圖上下文
ctx = canvas.getContext("2d")

# 設定迷宮線條的顏色與寬度
line_color = "blue"
line_width = 2
ctx.strokeStyle = line_color
ctx.lineWidth = line_width

# 繪製迷宮
lines = [
    [(31, 8), (111, 8)],
    [(151, 8), (231, 8)],
    [(31, 8), (31, 208)],
    [(231, 8), (231, 208)],
    [(31, 208), (111, 208)],
    [(231, 208), (151, 208)],
    [(71,48 ), (191,48 )],
    [(191,48 ), (191,88 )],
    [(111,48 ), (111,88 )],
    [(111,88 ), (31,88 )],
    [(71,128 ), (191,128 )],
    [(191,128 ), (191,208 )],
    [(151,128 ), (151,88 )],
    [(71,128 ), (71,168 )],
    [(111,208 ), (111,168 )],
    [(111,168 ), (151,168 )],
]

for line in lines:
    (x1, y1), (x2, y2) = line
    ctx.beginPath()
    ctx.moveTo(x1, y1)
    ctx.lineTo(x2, y2)
    ctx.stroke()

# 標註原點
ctx.fillStyle = "red"
ctx.font = "10px Arial"
ctx.fillText("原點", 31, 8)
</script>
</p><h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam3</h3>
<p>題目一: 請以自己的學號最後四碼作為下列繪圖的左上方點座標, 請將 (39, 32) 作為繪圖左上方點座標, 並以紅色文字標示出該點座標, 之後請利用 pixel=2 的黑色直線, 自訂迷宮畫布大小, 直接在頁面畫出下列圖像, 並且利用紅色連續線段標示從上方入口, 走至下方出口的路線圖.</p>
<p><a href="https://mdecp2024.github.io/hw-Kazlimu/content/Brython.html?src=https://gist.githubusercontent.com/Kazlimu/25acadbf54fef67e1bda85c656aa272d/raw/88569e3f087416fae7d451730cf145f0cf9a23b9/w16_exam3">w16_exam3 Brython 效果演示</a></p>
<p>影片流程演示:</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/jHLByUo7Zvg" width="560"></iframe></p>
<div id="brython_div1"></div>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
<script type="text/python3">
from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=400, height=400, style={"border": "1px solid black"})
brython_div = doc["brython_div1"]
brython_div <= canvas

# 獲取繪圖上下文
ctx = canvas.getContext("2d")

# 設定迷宮線條的顏色與寬度
line_color = "black"
line_width = 2
ctx.strokeStyle = line_color
ctx.lineWidth = line_width

# 繪製迷宮
lines = [
    [(31, 8), (111, 8)],
    [(151, 8), (231, 8)],
    [(31, 8), (31, 208)],
    [(231, 8), (231, 208)],
    [(31, 208), (111, 208)],
    [(231, 208), (151, 208)],
    [(71,48 ), (191,48 )],
    [(191,48 ), (191,88 )],
    [(111,48 ), (111,88 )],
    [(111,88 ), (31,88 )],
    [(71,128 ), (191,128 )],
    [(191,128 ), (191,208 )],
    [(151,128 ), (151,88 )],
    [(71,128 ), (71,168 )],
    [(111,208 ), (111,168 )],
    [(111,168 ), (151,168 )],
]

for line in lines:
    (x1, y1), (x2, y2) = line
    ctx.beginPath()
    ctx.moveTo(x1, y1)
    ctx.lineTo(x2, y2)
    ctx.stroke()

# 標註原點
ctx.fillStyle = "red"
ctx.font = "10px Arial"
ctx.fillText("原點", 31, 8)

# 設定紅色線條的顏色與寬度
line_color = "red"
ctx.strokeStyle = line_color
ctx.lineWidth = 2

# 繪製新的紅色線條
ctx.beginPath()
ctx.moveTo(131, 8)  # 新紅色線條的起點
ctx.lineTo(131, 28)  # 新紅色線條的終點
ctx.stroke()

# 繪製另一條紅色線條
ctx.beginPath()
ctx.moveTo(131, 28)  
ctx.lineTo(211, 28)  
ctx.stroke()

ctx.beginPath()
ctx.moveTo(211, 28)  
ctx.lineTo(211, 108)  
ctx.stroke()

ctx.beginPath()
ctx.moveTo(211, 108)  
ctx.lineTo(171, 108)  
ctx.stroke()

ctx.beginPath()
ctx.moveTo(171, 108)  
ctx.lineTo(171, 68)  
ctx.stroke()

ctx.beginPath()
ctx.moveTo(171, 68)  
ctx.lineTo(131, 68)  
ctx.stroke()

ctx.beginPath()
ctx.moveTo(131, 68)  
ctx.lineTo(131, 108)  
ctx.stroke()

ctx.beginPath()
ctx.moveTo(131, 108)  
ctx.lineTo(51, 108)  
ctx.stroke()

ctx.beginPath()
ctx.moveTo(51, 108)  
ctx.lineTo(51, 188)  
ctx.stroke()

ctx.beginPath()
ctx.moveTo(51, 188)  
ctx.lineTo(91, 188)  
ctx.stroke()

ctx.beginPath()
ctx.moveTo(91, 188)  
ctx.lineTo(91, 148)  
ctx.stroke()

ctx.beginPath()
ctx.moveTo(91, 148)  
ctx.lineTo(171, 148)  
ctx.stroke()

ctx.beginPath()
ctx.moveTo(171, 148)  
ctx.lineTo(171, 188)  
ctx.stroke()

ctx.beginPath()
ctx.moveTo(171, 188)  
ctx.lineTo(131, 188)  
ctx.stroke()

ctx.beginPath()
ctx.moveTo(131, 188)  
ctx.lineTo(131, 208)  
ctx.stroke()
</script>
</p><h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;">......</p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;">......</p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">......</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p>
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p><!-- 導入 brython 程式庫 --></p>
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<p><!-- 啟動 Brython --></p>
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<p><!-- editor1 開始 --></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<p><!-- editor1 結束 --></p>
<hr/>
<p><!-- ########################################## --></p>
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<p><!-- editor2 開始 --></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<p><!-- editor2 結束 --></p>
<hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>